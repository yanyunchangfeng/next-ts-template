import type { Metadata } from 'next';
import localFont from 'next/font/local';
import '@/app/globals.css';
import myImage from '@/app/assets/homepage.png';
import { Navigation } from '@/app/components';
import { use } from 'react';

const geistSans = localFont({
  src: './fonts/GeistVF.woff',
  variable: '--font-geist-sans',
  weight: '100 900'
});
const geistMono = localFont({
  src: './fonts/GeistMonoVF.woff',
  variable: '--font-geist-mono',
  weight: '100 900'
});

const userIsLogin = async () => {
  return Math.random() > 0.5;
};

export const metadata: Metadata = {
  title: 'yanyunchangfeng',
  description: 'Generated by yanyunchangfeng'
};
// app 目录必须包含根布局，也就是 app/layout.tsx 这个文件是必需的。
// 根布局必须包含 html 和 body标签，其他布局不能包含这些标签。如果你要更改这些标签，不推荐直接修改，参考《Metadata 篇》。
// 你可以使用路由组创建多个根布局。
// 默认根布局是服务端组件，且不能设置为客户端组件。

// 3. 平行路由（Parallel Routes）
// 平行路由可以使你在同一个布局中同时或者有条件的渲染一个或者多个页面（类似于  的插槽功能）。
// 3.1. 用途 1：条件渲染
// 3.2. 用途 2：独立路由处理
// 平行路由可以让你为每个路由定义独立的错误处理和加载界面：
// 3.3. 用途 3：子导航
export default function RootLayout({
  children,
  team,
  analytics,
  dashboard,
  login
}: Readonly<{
  children: React.ReactNode;
  team: React.ReactNode;
  analytics: React.ReactNode;
  dashboard: never;
  login: never;
}>) {
  const isLogin = use(userIsLogin());

  return (
    <html lang="en">
      <head />
      <body
        className={`${geistSans.variable} ${geistMono.variable} antialiased`}
        style={{
          backgroundImage: `url(${myImage.src})`,
          backgroundSize: 'cover',
          backgroundPosition: 'center',
          backgroundRepeat: 'no-repeat'
        }}
      >
        <div className="p-5">
          <Navigation />
          {children}
          {team}
          {analytics}
          {isLogin ? dashboard : login}
        </div>
      </body>
    </html>
  );
}

// 也就是说 layout 会包裹 template，template 又会包裹 page。
